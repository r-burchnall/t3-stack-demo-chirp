import { type NextPage } from "next";
import Head from "next/head";

import { api, type RouterOutputs } from "~/utils/api";
import { SignInButton, useAuth, useUser } from "@clerk/nextjs";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime"
import Image from "next/image";
import { LoadingPage, LoadingSpinner } from "~/components/loading";
import { useState } from "react";
import { postsRouter } from "~/server/api/routers/posts";

dayjs.extend(relativeTime)

type PostWithAuthor = RouterOutputs['posts']['getAll'][number]
const PostView = (props: PostWithAuthor) => {
    const { post, author } = props
    return (
        <div className="flex gap-3 w-full p-4 border-b border-slate-200">
            <Image
                height={56}
                width={56}
                className="rounded-full"
                src={author.profileImageUrl}
                alt={author.username} />
            <div className="flex flex-col grow">
                <div className="text-slate-300">
                    <span className="font-semibold">{`@${author.username}`}</span>
                    <span>{` Â· ${dayjs(post.createdAt).fromNow()}`}</span>
                </div>
                <div className="text-2xl">{post.content}</div>
            </div>
        </div>
    )
}

const CreatePostWizard = () => {
    const { user, } = useUser()
    const [input, setInput] = useState('')

    const ctx = api.useContext();
    const { mutate, isLoading: isPosting } = api.posts.create.useMutation({
        onSuccess: () => {
            setInput('')
            ctx.posts.invalidate()
        }
    })

    if (!user) return null

    return (
        <div className="flex gap-3 w-full">
            <Image
                height={56}
                width={56}
                className="h-14 w-14 rounded-full"
                src={user.profileImageUrl}
                alt={user.username!} />
            <input
                type="text"
                placeholder="Type some emojis!"
                className="bg-transparent grow outline-none disabled:opacity-50"
                value={input}
                disabled={isPosting}
                onChange={(e) => setInput(e.currentTarget.value)} />
                <button onClick={() => {
                    mutate({ content: input })
                    setInput('')
                }}>Post</button>
        </div>
    )
}

const Feed = () => {
    const { data, isLoading } = api.posts.getAll.useQuery()

    if (isLoading) return (
        <div className="flex justify-center p-3">
            <LoadingSpinner size={30} />
        </div>
    )

    if (!data) return <div>Something went wrong</div>

    return (
        <div className="flex flex-col">
            {data.map((fullPost) => (
                <PostView {...fullPost} key={fullPost.post.id} />
            ))}
        </div>
    )
}

const Home: NextPage = () => {
    const { isSignedIn, isLoaded: userLoaded } = useAuth()

    // Start fetching posts as soon as the page loads
    api.posts.getAll.useQuery()

    if (!userLoaded) return <LoadingPage />

    return (
        <>
            <Head>
                <title>Create T3 App</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main
                className="flex justify-center h-screen">
                <div className="w-full md:max-w-2xl border-x border-slate-400 h-screen">
                    <div className="flex border-b border-slate-400 p-4">
                        {!isSignedIn && <SignInButton />}
                        {!!isSignedIn && <CreatePostWizard />}
                    </div>
                    <Feed />
                </div>
            </main>
        </>
    );
};

export default Home;
